{"version":3,"sources":["components/Banner.js","services/projects.js","App.js","reportWebVitals.js","index.js"],"names":["Banner","className","a","fetch","method","mode","then","response","json","data","projects","items","getOverview","length","costs","map","project","parseFloat","net","sum","reduce","accumulator","currentValue","num","avg","toFixed","App","useState","setProjects","overview","setOverview","name","setName","amount","setAmount","gross","setGross","handleSubmit","e","aim","preventDefault","trim","isNaN","newProjects","slice","push","tax","addProject","alert","document","getElementById","reset","useEffect","getProjects","id","type","placeholder","autoComplete","onChange","target","value","handleNameChange","handleAmountChange","onClick","idx","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"sMAWeA,MATf,WAEE,OACE,qBAAKC,UAAU,SAAf,qB,mECJG,sBAAAC,EAAA,sEAEQC,MAAM,iEAAkE,CACnFC,OAAQ,MACRC,KAAM,SAEPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAUG,GACd,MAAO,CACLC,SAAUD,EAAKE,UATd,oF,sBAgBA,SAASC,EAAYF,GAC1B,GAAIA,EAASG,OAAQ,CACnB,IAAMC,EAAQJ,EAASK,KAAI,SAAAC,GAAO,OAAIC,WAAWD,EAAQE,QAEnDC,EAAML,EAAMM,QADF,SAACC,EAAaC,GAAd,OAA+BD,EAAcC,KAEvDC,EAAMT,EAAMD,OACZW,EAAML,EAAMI,EAClB,MAAO,CACLJ,IAAKA,EAAIM,QAAQ,GACjBD,IAAKA,EAAIC,QAAQ,GACjBF,IAAKA,GAIP,MAAO,GCiJIG,MAzKf,WAEE,MAAgCC,mBAAS,IAAzC,mBAAOjB,EAAP,KAAiBkB,EAAjB,KACA,EAAgCD,mBAAS,IAAzC,mBAAOE,EAAP,KAAiBC,EAAjB,KACA,EAAwBH,mBAAS,IAAjC,mBAAOI,EAAP,KAAaC,EAAb,KACA,EAA4BL,mBAAS,IAArC,mBAAOM,EAAP,KAAeC,EAAf,KACA,EAA0BP,mBAAS,GAAnC,mBAAOQ,EAAP,KAAcC,EAAd,KAyCA,SAASC,EAAcC,EAAGC,GACxBD,EAAEE,iBACU,QAARD,IACER,EAAKU,OAAO5B,QAAUoB,EAAOQ,OAAO5B,SAAW6B,MAAMzB,WAAWgB,IAcxE,SAAoBF,EAAME,GACxB,IAAIU,EAAcjC,EAASkC,MAAM,GACjCD,EAAYE,KAAK,CACfd,KAAMA,EACNb,IAAKe,EACLa,IAAY,IAAPb,IAEPL,EAAYe,GApBRI,CAAWhB,EAAME,GAGjBe,MAAM,sCAGVC,SAASC,eAAe,eAAeC,QACvCnB,EAAQ,IACRE,EAAU,IAgBZ,OAlEAkB,qBAAW,YDfN,WAAP,gCCgBIC,GAAc/C,MAAK,SAACG,GAClBmB,EAAYnB,EAAKC,UACjBoB,EAAYlB,EAAYH,EAAKC,gBAE9B,IAGH0C,qBAAW,WACL1C,EAASG,QACXiB,EAAYlB,EAAYF,MAEzB,CAACA,IAGJ0C,qBAAW,WACT,IAAM7B,EAAMN,WAAWgB,GACjBS,MAAMnB,GAIVa,EAAS,GAHTA,EAAa,IAAJb,KAKV,CAACU,IA2CoB,IAApBvB,EAASG,OACJ,mDAIP,sBAAKZ,UAAU,MAAf,UACE,cAAC,EAAD,IACA,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,aAAf,UACE,qBAAKA,UAAU,UAAf,SACE,uBAAMqD,GAAG,cAAT,UACE,sBAAKrD,UAAU,WAAf,UACE,qBAAKA,UAAU,QAAf,oBACA,8BACE,uBACEsD,KAAK,OACLxB,KAAK,OACLyB,YAAY,eACZC,aAAa,MACbC,SAAW,SAACpB,GAAD,OAzD7B,SAA2BA,GACzBN,EAAQM,EAAEqB,OAAOC,OAwDiBC,CAAiBvB,WAIzC,sBAAKrC,UAAU,WAAf,UACE,qBAAKA,UAAU,QAAf,mBACA,8BACE,uBACEsD,KAAK,OACLxB,KAAK,MACLyB,YAAY,kBACZC,aAAa,MACbC,SAAW,SAACpB,GAAD,OAhE7B,SAA6BA,GAC3BJ,EAAUI,EAAEqB,OAAOC,OA+DeE,CAAmBxB,WAI3C,sBAAKrC,UAAU,YAAf,UACE,sBAAKA,UAAU,aAAf,UACE,wCACA,yCAEF,sBAAKA,UAAU,UAAf,UACE,gCAAMkC,EAAMV,QAAQ,GAApB,aACA,gDAGJ,sBAAKxB,UAAU,UAAf,UACE,qBAAKA,UAAU,aAAf,SACE,uBAAOsD,KAAK,SAASK,MAAM,MAAMG,QAAS,SAACzB,GAAD,OAAOD,EAAaC,EAAG,YAEnE,qBAAKrC,UAAU,aAAf,SACE,uBAAOsD,KAAK,SAASK,MAAM,QAAQG,QAAS,SAACzB,GAAD,OAAOD,EAAaC,EAAG,sBAK3E,sBAAKrC,UAAU,WAAf,UACE,sBAAKA,UAAU,UAAf,UACE,2CACA,4CACA,0CACA,iDAEF,sBAAKA,UAAU,cAAf,UACE,wBACA,gCAAM4B,EAASV,IAAf,aACA,gCAAMU,EAASL,IAAf,aACA,8BAAMK,EAASN,eAIrB,sBAAKtB,UAAU,WAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,uCACA,sCACA,sCACA,2CAEDS,EAASK,KAAI,SAACC,EAASgD,GACtB,IAAM7B,EAAQlB,WAAWD,EAAQE,KAAOD,WAAWD,EAAQ8B,KAC3D,OACE,sBAAK7C,UAAU,UAAf,UACE,8BAAMe,EAAQe,OACd,gCAAMd,WAAWD,EAAQE,KAAKO,QAAQ,GAAtC,aACA,gCAAMR,WAAWD,EAAQ8B,KAAKrB,QAAQ,GAAtC,aACA,gCAAMU,EAAMV,QAAQ,GAApB,eAJ4BuC,gBCtJ7BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7D,MAAK,YAAkD,IAA/C8D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1B,SAASC,eAAe,SAM1Be,K","file":"static/js/main.becb8995.chunk.js","sourcesContent":["import '../App.css';\n\nfunction Banner () {\n\n  return (\n    <div className=\"Banner\">\n      ALASCO\n    </div>\n  );\n}\n\nexport default Banner;","// fetch projects' data\nexport async function getProjects() {\n\n  return await fetch('https://dl5mns5bwg.execute-api.eu-central-1.amazonaws.com/prod', {\n    method: 'GET',\n    mode: 'cors'\n  })\n  .then(response => response.json())\n  .then(function (data) {\n    return {\n      projects: data.items\n    };\n  });\n}\n\n\n// calculate overview values: sum, average & total number of items\nexport function getOverview(projects) {\n  if (projects.length) {\n    const costs = projects.map(project => parseFloat(project.net));\n    const sumFunc = (accumulator, currentValue) => accumulator + currentValue;\n    const sum = costs.reduce(sumFunc);\n    const num = costs.length;\n    const avg = sum / num;\n    return {\n      sum: sum.toFixed(2),\n      avg: avg.toFixed(2),\n      num: num\n    };\n  }\n  else {\n    return {};\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport Banner from './components/Banner';\nimport { getProjects, getOverview } from './services/projects';\nimport './App.css';\n\n\n\nfunction App() {\n\n  const [projects, setProjects] = useState([]);\n  const [overview, setOverview] = useState({});\n  const [name, setName] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [gross, setGross] = useState(0.0);\n\n  // get projects data once\n  useEffect (() => {\n    getProjects().then((data) => {\n      setProjects(data.projects);\n      setOverview(getOverview(data.projects));\n    });\n  }, []);\n\n  // when new project is added\n  useEffect (() => {\n    if (projects.length) {\n      setOverview(getOverview(projects));\n    }\n  }, [projects]);\n\n  // when amount input changes\n  useEffect (() => {\n    const num = parseFloat(amount);\n    if ( !isNaN(num) ) {\n      setGross(num*0.16);\n    }\n    else {\n      setGross(0.0);\n    }\n  }, [amount])\n\n\n\n  // name field value change\n  function handleNameChange (e) {\n    setName(e.target.value);\n  }\n\n  // amount field value change\n  function handleAmountChange (e) {\n    setAmount(e.target.value);\n  }\n\n  // handle add/reset button\n  function handleSubmit (e, aim) {\n    e.preventDefault();\n    if (aim === \"Add\") {\n      if (name.trim().length && amount.trim().length && !isNaN(parseFloat(amount)) ) {\n        addProject(name, amount);\n      }\n      else {\n        alert(\"Enter valid inputs to add project\");\n      }\n    }\n    document.getElementById(\"AddItemForm\").reset();\n    setName(\"\");\n    setAmount(\"\");\n  }\n\n\n  // add project to state\n  function addProject(name, amount) {\n    var newProjects = projects.slice(0)\n    newProjects.push({\n      name: name,\n      net: amount,\n      tax: amount*0.16\n    });\n    setProjects(newProjects);\n  }\n\n\n  if (projects.length === 0) {\n    return <>Loading ...</>\n  }\n\n  return (\n    <div className=\"App\">\n      <Banner />\n      <div className=\"Container\">\n        <div className=\"TopSection\">\n          <div className=\"AddItem\">\n            <form id=\"AddItemForm\">\n              <div className=\"FormUnit\">\n                <div className=\"label\">Name *</div>\n                <div>\n                  <input \n                    type=\"text\"\n                    name=\"name\"\n                    placeholder=\"Enter a name\"\n                    autoComplete=\"off\"\n                    onChange={ (e) => handleNameChange(e) }\n                  />\n                </div>\n              </div>\n              <div className=\"FormUnit\">\n                <div className=\"label\">Net *</div>\n                <div>\n                  <input\n                    type=\"text\"\n                    name=\"net\"\n                    placeholder=\"Enter an amount\"\n                    autoComplete=\"off\"\n                    onChange={ (e) => handleAmountChange(e) }\n                  />\n                </div>\n              </div>\n              <div className=\"InputInfo\">\n                <div className=\"InfoHeader\">\n                  <div>Gross</div>\n                  <div>Tax</div> \n                </div>\n                <div className=\"InfoMag\">\n                  <div>{gross.toFixed(2)} €</div>\n                  <div>16.00 %</div>\n                </div>\n              </div>\n              <div className=\"Buttons\">\n                <div className=\"FormButton\">\n                  <input type=\"button\" value=\"Add\" onClick={(e) => handleSubmit(e, 'Add')} />\n                </div>\n                <div className=\"FormButton\">\n                  <input type=\"button\" value=\"Reset\" onClick={(e) => handleSubmit(e, 'Reset')} />\n                </div>\n              </div>\n            </form>\n          </div>\n          <div className=\"Overview\">\n            <div className=\"Metrics\">\n              <div>Overview</div>  \n              <div>Total Sum</div> \n              <div>Average</div>   \n              <div>Total Items</div>\n            </div>\n            <div className=\"OverviewMag\">\n              <div></div>\n              <div>{overview.sum} €</div>\n              <div>{overview.avg} €</div>\n              <div>{overview.num}</div>\n            </div>\n          </div>\n        </div>\n        <div className=\"Projects\">\n          <div className=\"ProjectHeaders\">\n            <div>Name</div>\n            <div>Net</div>\n            <div>Tax</div>\n            <div>Gross</div>\n          </div>\n          {projects.map((project, idx) => {\n            const gross = parseFloat(project.net) + parseFloat(project.tax)\n            return (\n              <div className=\"Project\" key={idx}>\n                <div>{project.name}</div>\n                <div>{parseFloat(project.net).toFixed(2)} €</div>\n                <div>{parseFloat(project.tax).toFixed(2)} €</div>\n                <div>{gross.toFixed(2)} €</div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}